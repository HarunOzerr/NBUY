// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OzelDersler.Data.Concrete.EfCore.Contexts;

#nullable disable

namespace OzelDersler.Data.Migrations
{
    [DbContext(typeof(OzelDerslerContext))]
    [Migration("20230106083429_InitialDb")]
    partial class InitialDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.1");

            modelBuilder.Entity("OzelDersler.Entity.Concrete.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Branches");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Matematik",
                            Url = "matematik"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Fizik",
                            Url = "fizik"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Kimya",
                            Url = "kimya"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Biyoloji",
                            Url = "biyoloji"
                        });
                });

            modelBuilder.Entity("OzelDersler.Entity.Concrete.Student", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("About")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfRegistration")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = "6c49f23f-6e33-4dbe-864b-ecc03f30380f",
                            About = "Matematik dersinde kendimi geliştirmek istiyorum.",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8cd61439-cfd2-498d-aa9f-a5a974917f45",
                            DateOfRegistration = new DateTime(2023, 1, 6, 11, 34, 28, 768, DateTimeKind.Local).AddTicks(3723),
                            EmailConfirmed = false,
                            FirstName = "Harun",
                            LastName = "Özer",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ec41985e-e9a7-4bee-85fe-1159bf8455ac",
                            TwoFactorEnabled = false,
                            Url = "harun-ozer"
                        },
                        new
                        {
                            Id = "ae3b08f8-7f20-400b-99e4-7294aa3ebbf7",
                            About = "Fizik dersinde kendimi geliştirmek istiyorum.",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b056535d-3091-4e0d-a07e-e9c401bd53dc",
                            DateOfRegistration = new DateTime(2023, 1, 6, 11, 34, 28, 768, DateTimeKind.Local).AddTicks(3752),
                            EmailConfirmed = false,
                            FirstName = "Selami",
                            LastName = "Sadak",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "607528a1-d90b-45af-a40c-fb813d1f7a6f",
                            TwoFactorEnabled = false,
                            Url = "selami-sadak"
                        },
                        new
                        {
                            Id = "10a0b796-9149-4864-8dd7-41e467a940a4",
                            About = "Biyoloji alanında kendimi geliştirmek istiyorum.",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "047f24b8-fe3e-4194-8095-52ac663701fb",
                            DateOfRegistration = new DateTime(2023, 1, 6, 11, 34, 28, 768, DateTimeKind.Local).AddTicks(3769),
                            EmailConfirmed = false,
                            FirstName = "Yavuz",
                            LastName = "Akduman",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e0d35f3e-da86-43d1-b88a-79cfc48e9536",
                            TwoFactorEnabled = false,
                            Url = "yavuz-akduman"
                        });
                });

            modelBuilder.Entity("OzelDersler.Entity.Concrete.StudentTeacher", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StudentId1")
                        .HasColumnType("TEXT");

                    b.Property<string>("TeacherId1")
                        .HasColumnType("TEXT");

                    b.HasKey("StudentId", "TeacherId");

                    b.HasIndex("StudentId1");

                    b.HasIndex("TeacherId1");

                    b.ToTable("StudentTeachers");

                    b.HasData(
                        new
                        {
                            StudentId = 1,
                            TeacherId = 1
                        },
                        new
                        {
                            StudentId = 2,
                            TeacherId = 1
                        },
                        new
                        {
                            StudentId = 1,
                            TeacherId = 3
                        },
                        new
                        {
                            StudentId = 3,
                            TeacherId = 2
                        });
                });

            modelBuilder.Entity("OzelDersler.Entity.Concrete.Teacher", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("About")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BirthYear")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BranchId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfRegistration")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Experience")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<char>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("PricePerHour")
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UniversityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("UniversityId");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = "da5dc2b0-d0de-4299-938a-84e0c0562bea",
                            About = "Uzun zamandır öğretmenlik yapıyorum ve öğretmeyi çok seviyorum.",
                            AccessFailedCount = 0,
                            BirthYear = 1985,
                            BranchId = 1,
                            ConcurrencyStamp = "7e30fef9-6a17-4e0d-be3c-a0bc041d13b4",
                            DateOfRegistration = new DateTime(2023, 1, 6, 11, 34, 28, 768, DateTimeKind.Local).AddTicks(146),
                            EmailConfirmed = false,
                            Experience = 20,
                            FirstName = "Osman",
                            Gender = 'E',
                            ImageUrl = "1.png",
                            LastName = "Kıran",
                            Location = "İstanbul",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PricePerHour = 1500m,
                            SecurityStamp = "f94e10eb-3a57-4779-b756-0cceab73f92c",
                            TwoFactorEnabled = false,
                            UniversityId = 1,
                            Url = "osman-kiran"
                        },
                        new
                        {
                            Id = "3771078d-d2be-4538-bb85-ef653c8be984",
                            About = "Uzun zamandır öğretmenlik yapıyorum ve öğretmeyi çok seviyorum.",
                            AccessFailedCount = 0,
                            BirthYear = 1975,
                            BranchId = 2,
                            ConcurrencyStamp = "fe84919e-8dfd-4769-b376-509922aa126b",
                            DateOfRegistration = new DateTime(2023, 1, 6, 11, 34, 28, 768, DateTimeKind.Local).AddTicks(168),
                            EmailConfirmed = false,
                            Experience = 30,
                            FirstName = "Ahmet",
                            Gender = 'E',
                            ImageUrl = "2.png",
                            LastName = "Acar",
                            Location = "Ankara",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PricePerHour = 2000m,
                            SecurityStamp = "974f5ef4-f9ea-4321-934c-c87623eed67a",
                            TwoFactorEnabled = false,
                            UniversityId = 2,
                            Url = "ahmet-acar"
                        },
                        new
                        {
                            Id = "3fbcc31b-8c93-43dd-a062-e1fd2022c45a",
                            About = "Uzun zamandır öğretmenlik yapıyorum ve öğretmeyi çok seviyorum.",
                            AccessFailedCount = 0,
                            BirthYear = 1993,
                            BranchId = 3,
                            ConcurrencyStamp = "79f331c0-6167-42c1-805a-64976628d87e",
                            DateOfRegistration = new DateTime(2023, 1, 6, 11, 34, 28, 768, DateTimeKind.Local).AddTicks(193),
                            EmailConfirmed = false,
                            Experience = 10,
                            FirstName = "Hatice",
                            Gender = 'K',
                            ImageUrl = "3.png",
                            LastName = "Özer",
                            Location = "İstanbul",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PricePerHour = 2500m,
                            SecurityStamp = "36353e9f-d364-4416-8787-757ea4e59b0a",
                            TwoFactorEnabled = false,
                            UniversityId = 3,
                            Url = "hatice-ozer"
                        },
                        new
                        {
                            Id = "5bee4523-2e16-4f0c-a1ee-93c1f7e9cf5d",
                            About = "Uzun zamandır öğretmenlik yapıyorum ve öğretmeyi çok seviyorum.",
                            AccessFailedCount = 0,
                            BirthYear = 1995,
                            BranchId = 1,
                            ConcurrencyStamp = "70c7f7e1-418f-423f-9bdd-7efb4a20a04d",
                            DateOfRegistration = new DateTime(2023, 1, 6, 11, 34, 28, 768, DateTimeKind.Local).AddTicks(210),
                            EmailConfirmed = false,
                            Experience = 8,
                            FirstName = "Cemre",
                            Gender = 'E',
                            ImageUrl = "4.png",
                            LastName = "Şenel",
                            Location = "İstanbul",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            PricePerHour = 2200m,
                            SecurityStamp = "e2b216a7-99f8-4d12-b49f-598f48144b39",
                            TwoFactorEnabled = false,
                            UniversityId = 4,
                            Url = "cemre-senel"
                        });
                });

            modelBuilder.Entity("OzelDersler.Entity.Concrete.University", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Universities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Bahçeşehir Üniversitesi"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Beykent Üniversitesi"
                        },
                        new
                        {
                            Id = 3,
                            Name = "İstanbul Aydın Üniversitesi"
                        },
                        new
                        {
                            Id = 4,
                            Name = "İstanbul Teknik Üniversitesi"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Orta Doğu Teknik Üniversitesi"
                        });
                });

            modelBuilder.Entity("OzelDersler.Entity.Concrete.StudentTeacher", b =>
                {
                    b.HasOne("OzelDersler.Entity.Concrete.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId1");

                    b.HasOne("OzelDersler.Entity.Concrete.Teacher", "Teacher")
                        .WithMany("StudentTeachers")
                        .HasForeignKey("TeacherId1");

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("OzelDersler.Entity.Concrete.Teacher", b =>
                {
                    b.HasOne("OzelDersler.Entity.Concrete.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OzelDersler.Entity.Concrete.University", "University")
                        .WithMany()
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("University");
                });

            modelBuilder.Entity("OzelDersler.Entity.Concrete.Teacher", b =>
                {
                    b.Navigation("StudentTeachers");
                });
#pragma warning restore 612, 618
        }
    }
}
