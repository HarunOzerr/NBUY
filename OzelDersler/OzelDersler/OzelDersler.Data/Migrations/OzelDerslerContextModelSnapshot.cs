// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OzelDersler.Data.Concrete.EfCore.Contexts;

#nullable disable

namespace OzelDersler.Data.Migrations
{
    [DbContext(typeof(OzelDerslerContext))]
    partial class OzelDerslerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.1");

            modelBuilder.Entity("OzelDersler.Entity.Concrete.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Branches");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Matematik",
                            Url = "matematik"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Fizik",
                            Url = "fizik"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Kimya",
                            Url = "kimya"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Biyoloji",
                            Url = "biyoloji"
                        });
                });

            modelBuilder.Entity("OzelDersler.Entity.Concrete.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("About")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfRegistration")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "Matematik dersinde kendimi geliştirmek istiyorum.",
                            DateOfRegistration = new DateTime(2023, 1, 5, 9, 53, 21, 504, DateTimeKind.Local).AddTicks(2477),
                            FirstName = "Harun",
                            LastName = "Özer",
                            Url = "harun-ozer"
                        },
                        new
                        {
                            Id = 2,
                            About = "Fizik dersinde kendimi geliştirmek istiyorum.",
                            DateOfRegistration = new DateTime(2023, 1, 5, 9, 53, 21, 504, DateTimeKind.Local).AddTicks(2480),
                            FirstName = "Selami",
                            LastName = "Sadak",
                            Url = "selami-sadak"
                        },
                        new
                        {
                            Id = 3,
                            About = "Biyoloji alanında kendimi geliştirmek istiyorum.",
                            DateOfRegistration = new DateTime(2023, 1, 5, 9, 53, 21, 504, DateTimeKind.Local).AddTicks(2483),
                            FirstName = "Yavuz",
                            LastName = "Akduman",
                            Url = "yavuz-akduman"
                        });
                });

            modelBuilder.Entity("OzelDersler.Entity.Concrete.StudentTeacher", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.HasKey("StudentId", "TeacherId");

                    b.HasIndex("TeacherId");

                    b.ToTable("StudentTeachers");

                    b.HasData(
                        new
                        {
                            StudentId = 1,
                            TeacherId = 1
                        },
                        new
                        {
                            StudentId = 2,
                            TeacherId = 1
                        },
                        new
                        {
                            StudentId = 1,
                            TeacherId = 3
                        },
                        new
                        {
                            StudentId = 3,
                            TeacherId = 2
                        });
                });

            modelBuilder.Entity("OzelDersler.Entity.Concrete.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("About")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("BirthYear")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BranchId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateOfRegistration")
                        .HasColumnType("TEXT");

                    b.Property<int>("Experience")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<char>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PricePerHour")
                        .HasColumnType("TEXT");

                    b.Property<int>("UniversityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("UniversityId");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "Uzun zamandır öğretmenlik yapıyorum ve öğretmeyi çok seviyorum.",
                            BirthYear = 1985,
                            BranchId = 1,
                            DateOfRegistration = new DateTime(2023, 1, 5, 9, 53, 21, 504, DateTimeKind.Local).AddTicks(1169),
                            Experience = 20,
                            FirstName = "Osman",
                            Gender = 'E',
                            ImageUrl = "1.png",
                            LastName = "Kıran",
                            Location = "İstanbul",
                            PricePerHour = 1500m,
                            UniversityId = 1,
                            Url = "osman-kiran"
                        },
                        new
                        {
                            Id = 2,
                            About = "Uzun zamandır öğretmenlik yapıyorum ve öğretmeyi çok seviyorum.",
                            BirthYear = 1975,
                            BranchId = 2,
                            DateOfRegistration = new DateTime(2023, 1, 5, 9, 53, 21, 504, DateTimeKind.Local).AddTicks(1176),
                            Experience = 30,
                            FirstName = "Ahmet",
                            Gender = 'E',
                            ImageUrl = "2.png",
                            LastName = "Acar",
                            Location = "Ankara",
                            PricePerHour = 2000m,
                            UniversityId = 2,
                            Url = "ahmet-acar"
                        },
                        new
                        {
                            Id = 3,
                            About = "Uzun zamandır öğretmenlik yapıyorum ve öğretmeyi çok seviyorum.",
                            BirthYear = 1993,
                            BranchId = 3,
                            DateOfRegistration = new DateTime(2023, 1, 5, 9, 53, 21, 504, DateTimeKind.Local).AddTicks(1180),
                            Experience = 10,
                            FirstName = "Hatice",
                            Gender = 'K',
                            ImageUrl = "3.png",
                            LastName = "Özer",
                            Location = "İstanbul",
                            PricePerHour = 2500m,
                            UniversityId = 3,
                            Url = "hatice-ozer"
                        },
                        new
                        {
                            Id = 4,
                            About = "Uzun zamandır öğretmenlik yapıyorum ve öğretmeyi çok seviyorum.",
                            BirthYear = 1995,
                            BranchId = 1,
                            DateOfRegistration = new DateTime(2023, 1, 5, 9, 53, 21, 504, DateTimeKind.Local).AddTicks(1184),
                            Experience = 8,
                            FirstName = "Cemre",
                            Gender = 'E',
                            ImageUrl = "4.png",
                            LastName = "Şenel",
                            Location = "İstanbul",
                            PricePerHour = 2200m,
                            UniversityId = 4,
                            Url = "cemre-senel"
                        });
                });

            modelBuilder.Entity("OzelDersler.Entity.Concrete.University", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Universities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Bahçeşehir Üniversitesi"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Beykent Üniversitesi"
                        },
                        new
                        {
                            Id = 3,
                            Name = "İstanbul Aydın Üniversitesi"
                        },
                        new
                        {
                            Id = 4,
                            Name = "İstanbul Teknik Üniversitesi"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Orta Doğu Teknik Üniversitesi"
                        });
                });

            modelBuilder.Entity("OzelDersler.Entity.Concrete.StudentTeacher", b =>
                {
                    b.HasOne("OzelDersler.Entity.Concrete.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OzelDersler.Entity.Concrete.Teacher", "Teacher")
                        .WithMany("StudentTeachers")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("OzelDersler.Entity.Concrete.Teacher", b =>
                {
                    b.HasOne("OzelDersler.Entity.Concrete.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OzelDersler.Entity.Concrete.University", "University")
                        .WithMany()
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("University");
                });

            modelBuilder.Entity("OzelDersler.Entity.Concrete.Teacher", b =>
                {
                    b.Navigation("StudentTeachers");
                });
#pragma warning restore 612, 618
        }
    }
}
